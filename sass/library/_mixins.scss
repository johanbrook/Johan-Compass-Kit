// Show a debug message for this element (used for the body element as default)

// @param $message	A string to show
// @param $color	The background color of the debug box, defaults to yellow

@mixin debugmessage($message, $color: yellow){
	&::before{
		content: $message;
		font-weight: bold;
		display: block;
		text-align: center;
		background: #{$color};
		position: absolute;
		@include stretch($height: false);
		z-index: 999;
		top: 0;
	}
}


// Make an <a> element block.

@mixin link-block {
	display: block;
	
	& > img {
		display: block;
	}
}


// Make an element span a certain amount of columns.

// @param $span		How many columns to span, defaults to 1
// @param $fluid	Whether the measures should be fluid or not, defaults to true

@mixin column($span: 1, $fluid: true) {
	float: left;
	
	@if $fluid == true {
	width: make_fluid(get_columns($span));
	margin-right: make_fluid($gutter);	
	}
	@else{
	width: get_columns($span);
	margin-right: $gutter;
	}
	
	&.last {
		margin-right: 0;
	}
}

// Image replacement mixin.

// @param $image	The image file

@mixin image-replacement($image: false){
	display: block;
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
	
	@if $image != falseÂ {
		background-image: image-url($image);
		width: 100%;
		max-width: image-width($image);
		height: image-height($image);
		background-size: 100% 100%;
		background-repeat: no-repeat;	
	}
}

// Quick offsetting

// @param $top		Top offset
// @param $left		Left offset
@mixin offset($top: auto, $left: auto){
	position: relative;
	left: $left;
	top: $top;
}


// Antialias text

// @param $state	true | false. Defaults to true

@mixin smooth($state: true){
	@if $state == true {
		-webkit-font-smoothing: antialiased;
	}
	@else{
		-webkit-font-smoothing: subpixel-antialiased;
	}
}


// Relative Em units with fallback.

// @param $target				The target pixel size
// @param $include-lineheight	If the line-height property should be included. If true, line-height is 1.618.
// @param $prop					Which property. Defaults to 'font-size'

@mixin rem($target, $include-lineheight: true, $prop: "font-size") {
	#{unquote($prop)}: #{$target}px; 	/* Fallback */
	#{unquote($prop)}: #{$target/16}rem;
	
	@if $include-lineheight == true{
		
		@if $target > 20 {
			line-height: 1.168;
		}
	}
}


// Stretch an element width or height wise

// @param $height	true | false. Defaults to true
// @param $width	true | false. Defaults to true

@mixin stretch($height: true, $width: true){
	position: absolute;
	@if($height == true){
		top: 0;
		bottom: 0;
	}
	@if($width == true){
		right: 0;
		left: 0;
	}
}


// Clearfix mixin

@mixin clearfix {
	&::before,
	&::after {
	    content:"";
	    display:table;
	}

	&::after {
	    clear:both;
	}

	/* For IE 6/7 (trigger hasLayout) */
	& {
	    zoom:1;
	}
}


// FUNCTIONS

// Really nifty function for responsive designing. Just use it like: 'width: make_fluid(308px)', and it'll return a percentage
// based on the width of the container.

@function make_fluid($number, $total: $page_width){
	@return ($number / $total)*100%;
}

// Returns correctly formatted number of columns (based on the $column variable).
// Example usage: 'width: make_fluid(get_columns(3))'

@function get_columns($number){
	@return ( ($column*$number) + ($gutter*($number - 1)) );
}
