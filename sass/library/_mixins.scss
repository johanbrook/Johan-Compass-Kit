// Show a debug message for this element (used for the body element as default)

// @param $message	A string to show
// @param $color	The background color of the debug box, defaults to yellow

@mixin debugmessage($message, $color: yellow){
	&::before{
		content: $message;
		font-weight: bold;
		display: block;
		text-align: center;
		background: #{$color};
		position: absolute;
		@include stretch($height: false);
		z-index: 999;
		top: 0;
	}
}


// Make an <a> element block.

@mixin link-block {
	display: block;
	
	& > img {
		display: block;
	}
}


// Make an element span a certain amount of columns.

// @param $span		How many columns to span, defaults to 1
// @param $fluid	Whether the measures should be fluid or not, defaults to true

@mixin column($span: 1, $fluid: true) {
	float: left;
	
	@if $fluid == true {
	width: make_fluid(get_columns($span));
	margin-right: make_fluid($gutter);	
	}
	@else{
	width: get_columns($span);
	margin-right: $gutter;
	}
	
	&.last {
		margin-right: 0;
	}
}

// Image replacement mixin.

// @param $image	The image file

@mixin image-replacement($image){
	text-indent: -999em;
	display: block;
	background-image: image-url($image);
	width: 100%;
	max-width: image-width($image);
	height: image-height($image);
	background-size: 100% 100%;
	background-repeat: no-repeat;
}

// Quick offsetting

// @param $top		Top offset
// @param $left		Left offset
@mixin offset($top: auto, $left: auto){
	position: relative;
	left: $left;
	top: $top;
}


// Antialias text

// @param $state	"on" | "off". Defaults to "on"

@mixin smooth($state: "on"){
	@if $state == "on"{
		-webkit-font-smoothing: antialiased;
	}
	@else{
		-webkit-font-smoothing: subpixel-antialiased;
	}
}


// Stretch an element width or height wise

// @param $height	true | false. Defaults to true
// @param $width	true | false. Defaults to true

@mixin stretch($height: true, $width: true){
	position: absolute;
	@if($height == true){
		top: 0;
		bottom: 0;
	}
	@if($width == true){
		right: 0;
		left: 0;
	}
}


// Clearfix mixin

@mixin clearfix{
	&:after{
		visibility: hidden;
     	display: block;
	    font-size: 0;
     	content: " ";
     	clear: both;
     	height: 0;	
	}
	& {display: inline-block;}
	* html & {height: 1%;}
	& {display: block;}
}


// FUNCTIONS

// Really nifty function for responsive designing. Just use it like: 'width: make_fluid(308px)', and it'll return a percentage
// based on the width of the container.

@function make_fluid($number, $total: $page_width){
	@return ($number / $total)*100%;
}

// Returns correctly formatted number of columns (based on the $column variable).
// Example usage: 'width: make_fluid(get_columns(3))'

@function get_columns($number){
	@return ( ($column*$number) + ($gutter*($number - 1)) );
}
